global using System;
global using System.IO;
global using System.Linq;
global using System.Net.Http;
global using System.Threading;
global using System.Threading.Tasks;
global using System.Windows.Forms;
global using G = System.Collections.Generic;
using NStar.Core;
using System.Text.RegularExpressions;

namespace Generation;

public partial class Form1 : Form
{
	public Form1()
	{
		InitializeComponent();
		var global = """
	#Code(All, bool)
	#Code(Any*)
	#Code(Any, bool)
	#Code(Combine, 2)
	#Code(Combine, 3)
	#Code(Convert)
	#Code(ConvertAndJoin)
	#Code(Count, bool)
	#Code(Equals, bool, 2)
	#Code(Filter, bool)
	#Code(Find, bool)
	#Code(FindAll, bool)
	#Code(FindAllMax, decimal)
	#Code(FindAllMax, double)
	#Code(FindAllMax, int)
	#Code(FindAllMax, uint)
	#Code(FindAllMax, long)
	#Code(FindAllMax, MpzT)
	#Code(FindAllMean, decimal)
	#Code(FindAllMean, double)
	#Code(FindAllMean, int)
	#Code(FindAllMean, uint)
	#Code(FindAllMean, long)
	#Code(FindAllMean, MpzT)
	#Code(FindAllMedian, decimal)
	#Code(FindAllMedian, double)
	#Code(FindAllMedian, int)
	#Code(FindAllMedian, uint)
	#Code(FindAllMedian, long)
	#Code(FindAllMedian, MpzT)
	#Code(FindAllMin, decimal)
	#Code(FindAllMin, double)
	#Code(FindAllMin, int)
	#Code(FindAllMin, uint)
	#Code(FindAllMin, long)
	#Code(FindAllMin, MpzT)
	#Code(FindLast, bool)
	#Code(FindLastMax, decimal)
	#Code(FindLastMax, double)
	#Code(FindLastMax, int)
	#Code(FindLastMax, uint)
	#Code(FindLastMax, long)
	#Code(FindLastMax, MpzT)
	#Code(FindLastMean, decimal)
	#Code(FindLastMean, double)
	#Code(FindLastMean, int)
	#Code(FindLastMean, uint)
	#Code(FindLastMean, long)
	#Code(FindLastMean, MpzT)
	#Code(FindLastMedian, decimal)
	#Code(FindLastMedian, double)
	#Code(FindLastMedian, int)
	#Code(FindLastMedian, uint)
	#Code(FindLastMedian, long)
	#Code(FindLastMedian, MpzT)
	#Code(FindLastMin, decimal)
	#Code(FindLastMin, double)
	#Code(FindLastMin, int)
	#Code(FindLastMin, uint)
	#Code(FindLastMin, long)
	#Code(FindLastMin, MpzT)
	#Code(FindLastMaxIndex, decimal)
	#Code(FindLastMaxIndex, double)
	#Code(FindLastMaxIndex, int)
	#Code(FindLastMaxIndex, uint)
	#Code(FindLastMaxIndex, long)
	#Code(FindLastMaxIndex, MpzT)
	#Code(FindLastMeanIndex, decimal)
	#Code(FindLastMeanIndex, double)
	#Code(FindLastMeanIndex, int)
	#Code(FindLastMeanIndex, uint)
	#Code(FindLastMeanIndex, long)
	#Code(FindLastMeanIndex, MpzT)
	#Code(FindLastMedianIndex, decimal)
	#Code(FindLastMedianIndex, double)
	#Code(FindLastMedianIndex, int)
	#Code(FindLastMedianIndex, uint)
	#Code(FindLastMedianIndex, long)
	#Code(FindLastMedianIndex, MpzT)
	#Code(FindLastMinIndex, decimal)
	#Code(FindLastMinIndex, double)
	#Code(FindLastMinIndex, int)
	#Code(FindLastMinIndex, uint)
	#Code(FindLastMinIndex, long)
	#Code(FindLastMinIndex, MpzT)
	#Code(FindMax, decimal)
	#Code(FindMax, double)
	#Code(FindMax, int)
	#Code(FindMax, uint)
	#Code(FindMax, long)
	#Code(FindMax, MpzT)
	#Code(FindMean, decimal)
	#Code(FindMean, double)
	#Code(FindMean, int)
	#Code(FindMean, uint)
	#Code(FindMean, long)
	#Code(FindMean, MpzT)
	#Code(FindMedian, decimal)
	#Code(FindMedian, double)
	#Code(FindMedian, int)
	#Code(FindMedian, uint)
	#Code(FindMedian, long)
	#Code(FindMedian, MpzT)
	#Code(FindMin, decimal)
	#Code(FindMin, double)
	#Code(FindMin, int)
	#Code(FindMin, uint)
	#Code(FindMin, long)
	#Code(FindMin, MpzT)
	#Code(FindMaxIndexes, decimal)
	#Code(FindMaxIndexes, double)
	#Code(FindMaxIndexes, int)
	#Code(FindMaxIndexes, uint)
	#Code(FindMaxIndexes, long)
	#Code(FindMaxIndexes, MpzT)
	#Code(FindMeanIndexes, decimal)
	#Code(FindMeanIndexes, double)
	#Code(FindMeanIndexes, int)
	#Code(FindMeanIndexes, uint)
	#Code(FindMeanIndexes, long)
	#Code(FindMeanIndexes, MpzT)
	#Code(FindMedianIndexes, decimal)
	#Code(FindMedianIndexes, double)
	#Code(FindMedianIndexes, int)
	#Code(FindMedianIndexes, uint)
	#Code(FindMedianIndexes, long)
	#Code(FindMedianIndexes, MpzT)
	#Code(FindMinIndexes, decimal)
	#Code(FindMinIndexes, double)
	#Code(FindMinIndexes, int)
	#Code(FindMinIndexes, uint)
	#Code(FindMinIndexes, long)
	#Code(FindMinIndexes, MpzT)
	#Code(FindMaxIndex, decimal)
	#Code(FindMaxIndex, double)
	#Code(FindMaxIndex, int)
	#Code(FindMaxIndex, uint)
	#Code(FindMaxIndex, long)
	#Code(FindMaxIndex, MpzT)
	#Code(FindMeanIndex, decimal)
	#Code(FindMeanIndex, double)
	#Code(FindMeanIndex, int)
	#Code(FindMeanIndex, uint)
	#Code(FindMeanIndex, long)
	#Code(FindMeanIndex, MpzT)
	#Code(FindMedianIndex, decimal)
	#Code(FindMedianIndex, double)
	#Code(FindMedianIndex, int)
	#Code(FindMedianIndex, uint)
	#Code(FindMedianIndex, long)
	#Code(FindMedianIndex, MpzT)
	#Code(FindMinIndex, decimal)
	#Code(FindMinIndex, double)
	#Code(FindMinIndex, int)
	#Code(FindMinIndex, uint)
	#Code(FindMinIndex, long)
	#Code(FindMinIndex, MpzT)
	#Code(FrequencyTable, TResult)
	#Code(FrequencyTable, TSource, f=0)
	#Code(FrequencyTable, TResult, p=", Func<TResult, TResult, bool> equalFunction")
	#Code(FrequencyTable, TSource, p=", Func<TSource, TSource, bool> equalFunction", f=0)
	#Code(FrequencyTable, TResult, p=", Func<TResult, TResult, bool> equalFunction, Func<TResult, int> hashCodeFunction")
	#Code(FrequencyTable, TSource, p=", Func<TSource, TSource, bool> equalFunction, Func<TSource, int> hashCodeFunction", f=0)
	#Code(Group, TResult)
	#Code(Group, TSource, f=0)
	#Code(Group, TResult, p=", Func<TResult, TResult, bool> equalFunction")
	#Code(Group, TSource, p=", Func<TSource, TSource, bool> equalFunction", f=0)
	#Code(Group, TResult, p=", Func<TResult, TResult, bool> equalFunction, Func<TResult, int> hashCodeFunction")
	#Code(Group, TSource, p=", Func<TSource, TSource, bool> equalFunction, Func<TSource, int> hashCodeFunction", f=0)
	#Code(IndexesOf, int, p=", TSource target", f=0)
	#Code(IndexesOfMax, decimal)
	#Code(IndexesOfMax, double)
	#Code(IndexesOfMax, int)
	#Code(IndexesOfMax, uint)
	#Code(IndexesOfMax, long)
	#Code(IndexesOfMax, MpzT)
	#Code(IndexesOfMax*, decimal)
	#Code(IndexesOfMax*, double)
	#Code(IndexesOfMax*, int)
	#Code(IndexesOfMax*, uint)
	#Code(IndexesOfMax*, long)
	#Code(IndexesOfMax*, MpzT)
	#Code(IndexesOfMean, decimal)
	#Code(IndexesOfMean, double)
	#Code(IndexesOfMean, int)
	#Code(IndexesOfMean, uint)
	#Code(IndexesOfMean, long)
	#Code(IndexesOfMean, MpzT)
	#Code(IndexesOfMean*, decimal)
	#Code(IndexesOfMean*, double)
	#Code(IndexesOfMean*, int)
	#Code(IndexesOfMean*, uint)
	#Code(IndexesOfMean*, long)
	#Code(IndexesOfMean*, MpzT)
	#Code(IndexesOfMedian, decimal)
	#Code(IndexesOfMedian, double)
	#Code(IndexesOfMedian, int)
	#Code(IndexesOfMedian, uint)
	#Code(IndexesOfMedian, long)
	#Code(IndexesOfMedian, MpzT)
	#Code(IndexesOfMedian*, decimal)
	#Code(IndexesOfMedian*, double)
	#Code(IndexesOfMedian*, int)
	#Code(IndexesOfMedian*, uint)
	#Code(IndexesOfMedian*, long)
	#Code(IndexesOfMedian*, MpzT)
	#Code(IndexesOfMin, decimal)
	#Code(IndexesOfMin, double)
	#Code(IndexesOfMin, int)
	#Code(IndexesOfMin, uint)
	#Code(IndexesOfMin, long)
	#Code(IndexesOfMin, MpzT)
	#Code(IndexesOfMin*, decimal)
	#Code(IndexesOfMin*, double)
	#Code(IndexesOfMin*, int)
	#Code(IndexesOfMin*, uint)
	#Code(IndexesOfMin*, long)
	#Code(IndexesOfMin*, MpzT)
	#Code(IndexOf, int, p=", TSource target", f=0)
	#Code(IndexOfMax, decimal)
	#Code(IndexOfMax, double)
	#Code(IndexOfMax, int)
	#Code(IndexOfMax, uint)
	#Code(IndexOfMax, long)
	#Code(IndexOfMax, MpzT)
	#Code(IndexOfMax*, decimal)
	#Code(IndexOfMax*, double)
	#Code(IndexOfMax*, int)
	#Code(IndexOfMax*, uint)
	#Code(IndexOfMax*, long)
	#Code(IndexOfMax*, MpzT)
	#Code(IndexOfMean, decimal)
	#Code(IndexOfMean, double)
	#Code(IndexOfMean, int)
	#Code(IndexOfMean, uint)
	#Code(IndexOfMean, long)
	#Code(IndexOfMean, MpzT)
	#Code(IndexOfMean*, decimal)
	#Code(IndexOfMean*, double)
	#Code(IndexOfMean*, int)
	#Code(IndexOfMean*, uint)
	#Code(IndexOfMean*, long)
	#Code(IndexOfMean*, MpzT)
	#Code(IndexOfMedian, decimal)
	#Code(IndexOfMedian, double)
	#Code(IndexOfMedian, int)
	#Code(IndexOfMedian, uint)
	#Code(IndexOfMedian, long)
	#Code(IndexOfMedian, MpzT)
	#Code(IndexOfMedian*, decimal)
	#Code(IndexOfMedian*, double)
	#Code(IndexOfMedian*, int)
	#Code(IndexOfMedian*, uint)
	#Code(IndexOfMedian*, long)
	#Code(IndexOfMedian*, MpzT)
	#Code(IndexOfMin, decimal)
	#Code(IndexOfMin, double)
	#Code(IndexOfMin, int)
	#Code(IndexOfMin, uint)
	#Code(IndexOfMin, long)
	#Code(IndexOfMin, MpzT)
	#Code(IndexOfMin*, decimal)
	#Code(IndexOfMin*, double)
	#Code(IndexOfMin*, int)
	#Code(IndexOfMin*, uint)
	#Code(IndexOfMin*, long)
	#Code(IndexOfMin*, MpzT)
	#Code(LastIndexOf, int, p=", TSource target", f=0)
	#Code(LastIndexOfMax, decimal)
	#Code(LastIndexOfMax, double)
	#Code(LastIndexOfMax, int)
	#Code(LastIndexOfMax, uint)
	#Code(LastIndexOfMax, long)
	#Code(LastIndexOfMax, MpzT)
	#Code(LastIndexOfMax*, decimal)
	#Code(LastIndexOfMax*, double)
	#Code(LastIndexOfMax*, int)
	#Code(LastIndexOfMax*, uint)
	#Code(LastIndexOfMax*, long)
	#Code(LastIndexOfMax*, MpzT)
	#Code(LastIndexOfMean, decimal)
	#Code(LastIndexOfMean, double)
	#Code(LastIndexOfMean, int)
	#Code(LastIndexOfMean, uint)
	#Code(LastIndexOfMean, long)
	#Code(LastIndexOfMean, MpzT)
	#Code(LastIndexOfMean*, decimal)
	#Code(LastIndexOfMean*, double)
	#Code(LastIndexOfMean*, int)
	#Code(LastIndexOfMean*, uint)
	#Code(LastIndexOfMean*, long)
	#Code(LastIndexOfMean*, MpzT)
	#Code(LastIndexOfMedian, decimal)
	#Code(LastIndexOfMedian, double)
	#Code(LastIndexOfMedian, int)
	#Code(LastIndexOfMedian, uint)
	#Code(LastIndexOfMedian, long)
	#Code(LastIndexOfMedian, MpzT)
	#Code(LastIndexOfMedian*, decimal)
	#Code(LastIndexOfMedian*, double)
	#Code(LastIndexOfMedian*, int)
	#Code(LastIndexOfMedian*, uint)
	#Code(LastIndexOfMedian*, long)
	#Code(LastIndexOfMedian*, MpzT)
	#Code(LastIndexOfMin, decimal)
	#Code(LastIndexOfMin, double)
	#Code(LastIndexOfMin, int)
	#Code(LastIndexOfMin, uint)
	#Code(LastIndexOfMin, long)
	#Code(LastIndexOfMin, MpzT)
	#Code(LastIndexOfMin*, decimal)
	#Code(LastIndexOfMin*, double)
	#Code(LastIndexOfMin*, int)
	#Code(LastIndexOfMin*, uint)
	#Code(LastIndexOfMin*, long)
	#Code(LastIndexOfMin*, MpzT)
	#Code(Max, decimal)
	#Code(Max, double)
	#Code(Max, int)
	#Code(Max, uint)
	#Code(Max, long)
	#Code(Max, MpzT)
	#Code(Max*, decimal)
	#Code(Max*, double)
	#Code(Max*, int)
	#Code(Max*, uint)
	#Code(Max*, long)
	#Code(Max*, MpzT)
	#Code(Mean, decimal)
	#Code(Mean, double)
	#Code(Mean, int)
	#Code(Mean, uint)
	#Code(Mean, long)
	#Code(Mean, MpzT)
	#Code(Mean*, decimal)
	#Code(Mean*, double)
	#Code(Mean*, int)
	#Code(Mean*, uint)
	#Code(Mean*, long)
	#Code(Mean*, MpzT)
	#Code(Median, decimal)
	#Code(Median, double)
	#Code(Median, int)
	#Code(Median, uint)
	#Code(Median, long)
	#Code(Median, MpzT)
	#Code(Median*, decimal)
	#Code(Median*, double)
	#Code(Median*, int)
	#Code(Median*, uint)
	#Code(Median*, long)
	#Code(Median*, MpzT)
	#Code(Min, decimal)
	#Code(Min, double)
	#Code(Min, int)
	#Code(Min, uint)
	#Code(Min, long)
	#Code(Min, MpzT)
	#Code(Min*, decimal)
	#Code(Min*, double)
	#Code(Min*, int)
	#Code(Min*, uint)
	#Code(Min*, long)
	#Code(Min*, MpzT)
	#Code(Progression, TSource, p=", Func<TSource, TSource, TSource> function", f=0)
	#Code(Progression, p=", TResult seed, Func<TResult, TSource, TResult> function", f=0)
	#Code(RemoveDoubles, TResult)
	#Code(RemoveDoubles, TSource, f=0)
	#Code(RemoveDoubles, TResult, p=", Func<TResult, TResult, bool> equalFunction")
	#Code(RemoveDoubles, TSource, p=", Func<TSource, TSource, bool> equalFunction", f=0)
	#Code(RemoveDoubles, TResult, p=", Func<TResult, TResult, bool> equalFunction, Func<TResult, int> hashCodeFunction")
	#Code(RemoveDoubles, TSource, p=", Func<TSource, TSource, bool> equalFunction, Func<TSource, int> hashCodeFunction", f=0)
	#Code(RepresentIntoNumbers, int, f=0)
	#Code(RepresentIntoNumbers, int, p=", Func<TSource, TSource, bool> equalFunction", f=0)
	#Code(RepresentIntoNumbers, int, p=", Func<TSource, TSource, bool> equalFunction, Func<TSource, int> hashCodeFunction", f=0)
	#Code(Reverse, TSource, f=0)
	#Code(Sum, decimal)
	#Code(Sum, double)
	#Code(Sum, int)
	#Code(Sum, uint)
	#Code(Sum, long)
	#Code(Sum, MpzT)
	#Code(Sum*, decimal)
	#Code(Sum*, double)
	#Code(Sum*, int)
	#Code(Sum*, uint)
	#Code(Sum*, long)
	#Code(Sum*, MpzT)
	""";
		//	string pattern = """

		//public static #Return#I($1) $1Enumerable<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(#Repeat(ReadOnlySpan<TSource#N> source#N, $3{star})#Repeat(ReadOnlySpan<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), $2> function", ${f}{star})${p})
		//{
		//#Repeat("	if (function == null)
		//		throw new ArgumentNullException(nameof(function));
		//", ${f}{star})	#Initial#I($1)
		//	#Pattern2("List<#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N>", source#N, source#N.Length, source#N[i])
		//	#Repeat(/"else #Pattern2("#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N[]", array#N, array#N.Length, array#N[i])
		//	else #Pattern2("G.IList<#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N>", list2_#N, list2_#N.Count, list2_#N[i])
		//#Repeat(/"#Pattern3(source, count, item)"/, $3?)	else
		//		return $1Enumerable(#Repeat("new List<#Repeat(TSource, ${star})#Repeat($2, $!{star})#N>(source#N)", $3)#Repeat(", function", ${f}{star}));
		//"/, 0)}
		//#Repeat(/"
		//public static #Return#I($1) $1Enumerable<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(#Repeat(ReadOnlySpan<TSource#N> source#N, $3{star})#Repeat(ReadOnlySpan<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), int, $2> function", ${f}{star})${p})
		//{
		//#Repeat("	if (function == null)
		//		throw new ArgumentNullException(nameof(function));
		//", ${f}{star})	#Initial#I($1)
		//	#Pattern2i("List<#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N>", list#N, list#N._size, list#N._items[i])
		//	#Repeat(/"else #Pattern2i("#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N[]", array#N, array#N.Length, array#N[i])
		//	else #Pattern2i("G.IList<#Repeat(TSource, ${star})#Repeat($$2, $!{star})#N>", list2_#N, list2_#N.Count, list2_#N[i])
		//#Repeat(/"#Pattern3i(source, count, item)"/, $3?)	else
		//		return $1Enumerable(#Repeat("new List<#Repeat(TSource, ${star})#Repeat($2, $!{star})#N>(source#N)", $3)#Repeat(", function", ${f}{star}));
		//"/, 0)}"/, ${f}{star})
		//""";
		var pattern = """
			public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(ReadOnlySpan<TSource#N> source#N, $3{star})#Repeat(ReadOnlySpan<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat("source#N", $3)#Repeat(", function", ${f}{star}));
			#Repeat(/"public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(ReadOnlySpan<TSource#N> source#N, $3{star})#Repeat(ReadOnlySpan<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), int, $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat("source#N", $3)#Repeat(", function", ${f}{star}));
			"/, ${f}{star})public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(Span<TSource#N> source#N, $3{star})#Repeat(Span<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat((ReadOnlySpan<TSource#N>)source#N, $3{star})#Repeat((ReadOnlySpan<$2>)source#N, $!{star})#Repeat(", function", ${f}{star}));
			#Repeat(/"public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(Span<TSource#N> source#N, $3{star})#Repeat(Span<$2> source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), int, $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat((ReadOnlySpan<TSource#N>)source#N, $3{star})#Repeat((ReadOnlySpan<$2>)source#N, $!{star})#Repeat(", function", ${f}{star}));
			"/, ${f}{star})public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(TSource#N[] source#N, $3{star})#Repeat($2[] source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat((ReadOnlySpan<TSource#N>)source#N.AsSpan(), $3{star})#Repeat((ReadOnlySpan<$2>)source#N.AsSpan(), $!{star})#Repeat(", function", ${f}{star}));
			#Repeat(/"public static #Return#I($1) $1<#Repeat(TSource#N, $3{star})#Repeat(", $2", $2?)>(this #Repeat(TSource#N[] source#N, $3{star})#Repeat($2[] source#N, $!{star})#Repeat(", Func<#Repeat(TSource#N, $3), int, $2> function", ${f}{star})${p}) => List<$2>.$1Enumerable(#Repeat((ReadOnlySpan<TSource#N>)source#N.AsSpan(), $3{star})#Repeat((ReadOnlySpan<$2>)source#N.AsSpan(), $!{star})#Repeat(", function", ${f}{star}));
			"/, ${f}{star})
			""";
		var pattern2 = """
	#Repeat(/"if (#Repeat("source#N is $1 $2", $$3, " && "))
		{
			"/, 0)int count = MinEnumerable(new[] { #Repeat($3, $$3) }) ?? 0;
			#InnerDeclaration#I($$1)
			for (int i = 0; i < count; i++)
			{
	#Repeat("			#Repeat(TSource, $${star})#Repeat($$2, $$!{star})#N item#N = $4;", $$3, "
	")
				if (#Repeat(/"#Predicate#I($$1)"/, $$3, " && "))
					#Func#I(result._items[#DestIndex#I($$1)], $$1)
				else #AltFunc#I(result._items[#DestIndex#I($$1)], $$1)
			}
			#Finish#I($$1)#Repeat(/"
		}"/, 0)
	""";
		var pattern3 = """
		else if (source.TryGetNonEnumeratedCount(out int count))
		{
			#InnerDeclaration#I($$1)
			int i = 0;
			foreach (#Repeat(TSource, $${star})#Repeat($$2, $$!{star}) item in source)
			{
				if (#Predicate#I($$1))
					#Func#I(result._items[#DestIndex#I($$1)], $$1)
				else #AltFunc#I(result._items[#DestIndex#I($$1)], $$1)
				i++;
			}
			#Finish#I($$1)
		}

	""";
		G.Dictionary<string, string> returns = new() { { "All", "bool" }, { "Any", "bool" }, { "Combine", "List<$2>" }, { "Convert", "List<$2>" }, { "ConvertAndJoin", "List<$2>" }, { "Count", "int" }, { "Equals", "bool" }, { "Filter", "List<TSource>" }, { "Find", "TSource?" }, { "FindAll", "List<TSource>" }, { "FindAllMax", "List<TSource>" }, { "FindAllMean", "List<TSource>" }, { "FindAllMedian", "List<TSource>" }, { "FindAllMin", "List<TSource>" }, { "FindLast", "TSource?" }, { "FindLastMax", "TSource?" }, { "FindLastMean", "TSource?" }, { "FindLastMedian", "TSource?" }, { "FindLastMin", "TSource?" }, { "FindLastMaxIndex", "int" }, { "FindLastMeanIndex", "int" }, { "FindLastMedianIndex", "int" }, { "FindLastMinIndex", "int" }, { "FindMax", "TSource?" }, { "FindMean", "TSource?" }, { "FindMedian", "TSource?" }, { "FindMin", "TSource?" }, { "FindMaxIndexes", "List<int>" }, { "FindMeanIndexes", "List<int>" }, { "FindMedianIndexes", "List<int>" }, { "FindMinIndexes", "List<int>" }, { "FindMaxIndex", "int" }, { "FindMeanIndex", "int" }, { "FindMedianIndex", "int" }, { "FindMinIndex", "int" }, { "FrequencyTable", "List<($2 Key, int Count)>" }, { "Group", "List<Group<TSource, $2>>" }, { "IndexesOf", "List<int>" }, { "IndexesOfMax", "List<int>" }, { "IndexesOfMean", "List<int>" }, { "IndexesOfMedian", "List<int>" }, { "IndexesOfMin", "List<int>" }, { "IndexOf", "int" }, { "IndexOfMax", "int" }, { "IndexOfMean", "int" }, { "IndexOfMedian", "int" }, { "IndexOfMin", "int" }, { "LastIndexOf", "int" }, { "LastIndexOfMax", "int" }, { "LastIndexOfMean", "int" }, { "LastIndexOfMedian", "int" }, { "LastIndexOfMin", "int" }, { "Max", "$2\\?" }, { "Mean", "double?" }, { "Median", "$2\\?" }, { "Min", "$2\\?" }, { "OfType", "List<$2>" }, { "Progression", "$2\\?" }, { "RemoveDoubles", "List<TSource>" }, { "RepresentIntoNumbers", "List<int>" }, { "Reverse", "List<TSource>" }, { "Sum", "$2" } };
		G.Dictionary<string, string> initials = new() { { "FrequencyTable", "Dictionary<$2, int> dic = new(new EComparer(equalFunction, hashCodeFunction));" }, { "Group", "Dictionary<$2, int> dic = new(new EComparer(equalFunction, hashCodeFunction));" }, { "RemoveDoubles", "HashSet<$2> hs = new(new EComparer(equalFunction, hashCodeFunction));" }, { "RepresentIntoNumbers", "Dictionary<TSource, int> dic = new(new EComparer(equalFunction, hashCodeFunction));" } };
		G.Dictionary<string, string> innerDeclarations = new() { { "Combine", "List<$$2> result = new(count);" }, { "Convert", "List<$$2> result = new(count);" }, { "Count", "int result = 0;" }, { "ConvertAndJoin", "List<$$2> result = new(count);" }, { "Filter", "List<TSource> result = new(count);\r\nint j = 0;" }, { "FindAll", "List<TSource> result = new(count);\r\nint j = 0;" }, { "FindAllMax", "List<TSource> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "FindAllMean", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? new() : value == value2 ? FindAllEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : new();" }, { "FindAllMedian", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindAllEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindAllMin", "List<TSource> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "FindLastMax", "TSource? result = default;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindLastMean", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? default : value == value2 ? FindLastEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : default;" }, { "FindLastMedian", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindLastEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindLastMin", "TSource? result = default;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindLastMaxIndex", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindLastMeanIndex", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? default : value == value2 ? FindLastEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : default;" }, { "FindLastMedianIndex", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindLastEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindLastMinIndex", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindMax", "TSource? result = default;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindMean", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? default : value == value2 ? FindEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : default;" }, { "FindMedian", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindMin", "TSource? result = default;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindMaxIndexes", "List<int> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "FindMeanIndexes", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? new() : value == value2 ? FindAllEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : new();" }, { "FindMedianIndexes", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindAllEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindMinIndexes", "List<int> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "FindMaxIndex", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FindMeanIndex", "double? value = MeanEnumerable($2#Repeat(\", function\", ${star}));\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? default : value == value2 ? FindEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value2) : default;" }, { "FindMedianIndex", "$$2\\? value = MedianEnumerable($2#Repeat(\", function\", ${star}));\r\nreturn FindEnumerable($2, (x, index) => #Repeat(\"function(x, index)\", ${f}{star})#Repeat(\"x\", $!{f}{star}) == value);" }, { "FindMinIndex", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "FrequencyTable", "List<($$2 Key, int Count)> result = new(count);\r\nint j = 0;\r\n$$2 f;" }, { "Group", "List<($$2, List<TSource>)> result = new(count);\r\nint j = 0;\r\n$$2 f;" }, { "IndexesOf", "List<int> result = new(count);" }, { "IndexesOfMax", "List<int> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "IndexesOfMean", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\ndouble? value = MeanEnumerable(list_);\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? new() : value == value2 ? IndexesOfEnumerable(list_, value2.Value) : new();" }, { "IndexesOfMedian", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\n$$2\\? value = MedianEnumerable(list_);\r\nreturn value == null ? new() : IndexesOfEnumerable(list_, value.Value);" }, { "IndexesOfMin", "List<int> result = new(count);\r\n$$2\\? indicator = default;\r\nint j = 0;\r\n$$2 f;" }, { "IndexOfMax", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "IndexOfMean", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\ndouble? value = MeanEnumerable(list_);\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? -1 : value == value2 ? IndexOfEnumerable(list_, value2.Value) : default;" }, { "IndexOfMedian", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\n$$2\\? value = MedianEnumerable(list_);\r\nreturn value == null ? -1 : IndexOfEnumerable(list_, value.Value);" }, { "IndexOfMin", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "LastIndexOfMax", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "LastIndexOfMean", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\ndouble? value = MeanEnumerable(list_);\r\n$$2\\? value2 = ($$2\\?)value;\r\nreturn value2 == null ? -1 : value == value2 ? LastIndexOfEnumerable(list_, value2.Value) : default;" }, { "LastIndexOfMedian", "List<$$2> list_ = #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"ReturnOrConstruct($2)\", $!{f}{star});\r\n$$2\\? value = MedianEnumerable(list_);\r\nreturn value == null ? -1 : LastIndexOfEnumerable(list_, value.Value);" }, { "LastIndexOfMin", "int result = -1;\r\n$$2\\? indicator = default;\r\n$$2 f;" }, { "Max", "$$2\\? indicator = default;\r\n$$2 f;" }, { "Mean", "double result = 0;\r\n$$2 f;" }, { "Median", "return $3 == 0 ? default : #Repeat(\"ConvertEnumerable($2, function)\", ${star})#Repeat(\"new List<$$2>($2)\", $!{f}{star}).Sort()._items[($3 - 1) / 2];" }, { "Min", "$$2\\? indicator = default;\r\n$$2 f;" }, { "OfType", "List<$$2> result = new(count);" }, { "Progression", "$$2\\? result = default;" }, { "RemoveDoubles", "List<TSource> result = new(count);\r\nint j = 0;" }, { "RepresentIntoNumbers", "List<$$2> result = new(count);\r\nint j = 0;" }, { "Reverse", "List<TSource> result = new(count);" }, { "Sum", "$$2 result = 0;" } };
		G.Dictionary<string, string> predicates = new() { { "All", "#Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})" }, { "Any", "#Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})" }, { "Count", "#Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})" }, { "Equals", "function(item, item2#I)" }, { "Filter", "function(item#I)" }, { "Find", "function(item#I)" }, { "FindAll", "function(item#I)" }, { "FindAllMax", "indicator == null" }, { "FindAllMin", "indicator == null" }, { "FindLast", "function(item#I)" }, { "FindLastMax", "indicator == null" }, { "FindLastMin", "indicator == null" }, { "FindLastMaxIndex", "indicator == null" }, { "FindLastMinIndex", "indicator == null" }, { "FindMax", "indicator == null" }, { "FindMin", "indicator == null" }, { "FindMaxIndexes", "indicator == null" }, { "FindMinIndexes", "indicator == null" }, { "FindMaxIndex", "indicator == null" }, { "FindMinIndex", "indicator == null" }, { "FrequencyTable", "dic.TryGetValue(f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star}), out int value)" }, { "Group", "dic.TryGetValue(f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star}), out int value)" }, { "IndexesOf", "item.Equals(target)" }, { "IndexesOfMax", "indicator == null" }, { "IndexesOfMin", "indicator == null" }, { "IndexOf", "item.Equals(target)" }, { "IndexOfMax", "indicator == null" }, { "IndexOfMin", "indicator == null" }, { "LastIndexOf", "item.Equals(target)" }, { "LastIndexOfMax", "indicator == null" }, { "LastIndexOfMin", "indicator == null" }, { "Max", "indicator == null" }, { "Min", "indicator == null" }, { "Progression", "result == null" }, { "RemoveDoubles", "hs.Add(#Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star}))" }, { "RepresentIntoNumbers", "dic.TryGetValue(item, out int value)" } };
		G.Dictionary<string, string> funcs = new() { { "Any", "return true;" }, { "Combine", "$1 = function(#Repeat(item#N, $$3)#I);" }, { "Convert", "$1 = function(item#I);" }, { "ConvertAndJoin", "result.AddRange(function(item#I));" }, { "Count", "result++;" }, { "Filter", "$1 = item;" }, { "Find", "return item;" }, { "FindAll", "$1 = item;" }, { "FindAllMax", "{\r\nindicator = function(item#I);\r\nresult._items[j++] = item;\r\n}" }, { "FindAllMin", "{\r\nindicator = function(item#I);\r\nresult._items[j++] = item;\r\n}" }, { "FindLast", "return item;" }, { "FindLastMax", "{\r\nindicator = function(item#I);\r\nresult = item;\r\n}" }, { "FindLastMin", "{\r\nindicator = function(item#I);\r\nresult = item;\r\n}" }, { "FindLastMaxIndex", "{\r\nindicator = function(item#I);\r\nresult = i;\r\n}" }, { "FindLastMinIndex", "{\r\nindicator = function(item#I);\r\nresult = i;\r\n}" }, { "FindMax", "{\r\nindicator = function(item#I);\r\nresult = item;\r\n}" }, { "FindMin", "{\r\nindicator = function(item#I);\r\nresult = item;\r\n}" }, { "FindMaxIndexes", "{\r\nindicator = function(item#I);\r\nresult._items[j++] = i;\r\n}" }, { "FindMinIndexes", "{\r\nindicator = function(item#I);\r\nresult._items[j++] = i;\r\n}" }, { "FindMaxIndex", "{\r\nindicator = function(item#I);\r\nresult = i;\r\n}" }, { "FindMinIndex", "{\r\nindicator = function(item#I);\r\nresult = i;\r\n}" }, { "FrequencyTable", "result._items[value].Count++;" }, { "Group", "result._items[value].Add(item);" }, { "IndexesOf", "$1 = i;" }, { "IndexesOfMax", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult._items[j++] = i;\r\n}" }, { "IndexesOfMin", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult._items[j++] = i;\r\n}" }, { "IndexOf", "return i;" }, { "IndexOfMax", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult = i;\r\n}" }, { "IndexOfMin", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult = i;\r\n}" }, { "LastIndexOf", "return i;" }, { "LastIndexOfMax", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult = i;\r\n}" }, { "LastIndexOfMin", "{\r\nindicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});\r\nresult = i;\r\n}" }, { "Max", "indicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});" }, { "Mean", "result += (double)#Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});" }, { "Min", "indicator = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});" }, { "Progression", "result = item;" }, { "RemoveDoubles", "result._items[j++] = item;" }, { "RepresentIntoNumbers", "$1 = value;" }, { "Reverse", "$1 = item;" }, { "Sum", "result += #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star});" } };
		G.Dictionary<string, string> altFuncs = new() { { "All", "\r\nreturn false;" }, { "Equals", "\r\nreturn false;" }, { "FindAllMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = item;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = item;" }, { "FindAllMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = item;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = item;" }, { "FindLastMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = item;\r\n}" }, { "FindLastMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = item;\r\n}" }, { "FindLastMaxIndex", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "FindLastMinIndex", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "FindMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = item;\r\n}" }, { "FindMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = item;\r\n}" }, { "FindMaxIndexes", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = i;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = i;" }, { "FindMinIndexes", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = i;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = i;" }, { "FindMaxIndex", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "FindMinIndex", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "FrequencyTable", "{dic.Add(f, j);\r\nresult._items[j++] = (f, 1);}" }, { "Group", "{dic.Add(f, j);\r\nresult._items[j++] = new(item, f);}" }, { "IndexesOfMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = i;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = i;" }, { "IndexesOfMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult._items[j = 0] = i;\r\n}\r\nelse if (f == indicator!)\r\nresult._items[j++] = i;" }, { "IndexOfMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "IndexOfMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "LastIndexOfMax", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "LastIndexOfMin", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\n{\r\nindicator = f;\r\nresult = i;\r\n}" }, { "Max", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) > indicator!)\r\nindicator = f;" }, { "Min", "if ((f = #Repeat(\"function(item#I)\", ${f}{star})#Repeat(item, $!{f}{star})) < indicator!)\r\nindicator = f;" }, { "Progression", "result = function(result, item#I);" }, { "RepresentIntoNumbers", "dic.Add(item, $1 = j++);" } };
		G.Dictionary<string, string> destIndexes = new() { { "Filter", "j++" }, { "FindAll", "j++" }, { "IndexesOf", "j++" }, { "Reverse", "^(i + 1)" } };
		G.Dictionary<string, string> finishes = new() { { "All", "return true;" }, { "Any", "return false;" }, { "Combine", "result._size = count;\r\nreturn result;" }, { "Convert", "result._size = count;\r\nreturn result;" }, { "Count", "return result;" }, { "ConvertAndJoin", "return result;" }, { "Equals", "return true;" }, { "Filter", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "Find", "return default;" }, { "FindAll", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "FindAllMax", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "FindAllMin", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "FindLast", "return default;" }, { "FindLastMax", "return result;" }, { "FindLastMin", "return result;" }, { "FindLastMaxIndex", "return result;" }, { "FindLastMinIndex", "return result;" }, { "FindMax", "return result;" }, { "FindMin", "return result;" }, { "FindMaxIndexes", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "FindMinIndexes", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "FindMaxIndex", "return result;" }, { "FindMinIndex", "return result;" }, { "FrequencyTable", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "Group", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "IndexesOf", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "IndexesOfMax", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "IndexesOfMin", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "IndexOf", "return -1;" }, { "IndexOfMax", "return result;" }, { "IndexOfMin", "return result;" }, { "LastIndexOf", "return -1;" }, { "LastIndexOfMax", "return result;" }, { "LastIndexOfMin", "return result;" }, { "Max", "return indicator;" }, { "Mean", "return result / $3;" }, { "Min", "return indicator;" }, { "OfType", "result._size = count;\r\nreturn result;" }, { "Progression", "return result;" }, { "RemoveDoubles", "result._size = j;\r\nresult.TrimExcess();\r\nreturn result;" }, { "RepresentIntoNumbers", "result._size = count;\r\nreturn result;" }, { "Reverse", "result._size = count;\r\nreturn result;" }, { "Sum", "return result;" } };
		string Convert(string input, string pattern, G.Dictionary<string, string> dic, bool insertI, string default_) => Regex.Replace(input, pattern, x => ReplaceMatches3(dic.TryGetValue(x.Groups[^1].Value, out var value) ? MyRegex().Replace(value, insertI ? ", i" : "") : default_, x));
		string Convert2(string input) => Convert(Convert(Convert(Convert(Convert(Convert(Convert(Convert(input, @"#Return(?:#I)?\(([^\r\n]+?)\)", returns, true, "$2"), @"#Initial(?:#I)?\(([^\r\n]+?)\)", initials, true, ""), @"#InnerDeclaration(?:#I)?\(([^\r\n]+?)\)", innerDeclarations, true, ""), @"#Predicate(?:#I)?\(([^\r\n]+?)\)", predicates, true, "true"), @"#Func(?:#I)?\(([^\r\n]+?), ([^\r\n]+?)\)", funcs, true, "{\r\n}"), @"#AltFunc(?:#I)?\(([^\r\n]+?), ([^\r\n]+?)\)", altFuncs, true, "\r\n{\r\n}"), @"#DestIndex(?:#I|, i)?\(([^\r\n]+?)\)", destIndexes, true, "i"), @"#Finish(?:#I)?\(([^\r\n]+?)\)", finishes, true, "");
		string ReplaceMatches(string input, Match match) => input.Replace("$1", match.Groups[1].Value).Replace("$2?", match.Groups[2].Value is "TResult" or "" ? "1" : "0").Replace("$2\\?", "$2?").Replace("$2", match.Groups[2].Value == "" ? "TResult" : match.Groups[2].Value).Replace("$3{star}", match.Groups[4].Value == "*" ? "0" : match.Groups[3].Value).Replace("$!{f}{star}", match.Groups[4].Value == "*" || match.Groups[6].Value == "0" ? "1" : "0").Replace("$!{star}", match.Groups[4].Value == "*" ? "1" : "0").Replace("$3?", match.Groups[3].Value == "" ? "1" : "0").Replace("$3", match.Groups[3].Value).Replace("${f}{star}", match.Groups[4].Value == "*" || match.Groups[6].Value == "0" ? "0" : "1").Replace("${star}", match.Groups[4].Value == "*" ? "0" : "1").Replace("${p}", match.Groups[5].Value);
		string ReplaceMatches2(string input, Match match, Match outerMatch) => ReplaceMatches(input.Replace("$$", "$#").Replace("$1", match.Groups[1].Value).Replace("$$", "$#").Replace("$2", match.Groups[2].Value).Replace("$3", match.Groups[3].Value).Replace("$4", match.Groups[4].Value).Replace("$#", "$"), outerMatch);
		string ReplaceMatches3(string input, Match match) => input.Replace("$1", match.Groups[1].Value);
		Clipboard.SetText(MyRegex1().Replace(MyRegex1().Replace(MyRegex1().Replace(MyRegex2().Replace(MyRegex3().Replace(MyRegex4().Replace(global, x => ReplaceMatches(Convert2(ReplaceMatches(MyRegex5().Replace(MyRegex6().Replace(MyRegex7().Replace(MyRegex8().Replace(pattern, y => ReplaceMatches2(Convert2(ReplaceMatches2(pattern2, y, x)), y, x)), y => ReplaceMatches2(Convert2(ReplaceMatches2(pattern3, y, x)), y, x)), y => ReplaceMatches2(Convert2(ReplaceMatches2(pattern2, y, x)), y, x).Replace(", i)", ")").Replace(", index)", ")")), y => ReplaceMatches2(Convert2(ReplaceMatches2(pattern3, y, x)), y, x).Replace(", i)", ")").Replace(", index)", ")")), x)), x)), x => string.Join(x.Groups[3].Value == "" ? ", " : x.Groups[3].Value, (new byte[int.TryParse(x.Groups[2].Value, out var count) ? count : 1]).Select((_, index) => x.Groups[1].Value.Replace("#N", index == 0 ? "" : (index + 1).ToString())))), x => string.Join(x.Groups[3].Value == "" ? ", " : x.Groups[3].Value, (new byte[int.TryParse(x.Groups[2].Value, out var count) ? count : 1]).Select((_, index) => x.Groups[1].Value.Replace("#N", index == 0 ? "" : (index + 1).ToString())))), x => string.Join(x.Groups[3].Value == "" ? ", " : x.Groups[3].Value, (new byte[int.TryParse(x.Groups[2].Value, out var count) ? count : 1]).Select((_, index) => x.Groups[1].Value.Replace("#N", index == 0 ? "" : (index + 1).ToString())))), x => string.Join(x.Groups[3].Value == "" ? ", " : x.Groups[3].Value, (new byte[int.TryParse(x.Groups[2].Value, out var count) ? count : 1]).Select((_, index) => x.Groups[1].Value.Replace("#N", index == 0 ? "" : (index + 1).ToString())))), x => string.Join(x.Groups[3].Value == "" ? ", " : x.Groups[3].Value, (new byte[int.TryParse(x.Groups[2].Value, out var count) ? count : 1]).Select((_, index) => x.Groups[1].Value.Replace("#N", index == 0 ? "" : (index + 1).ToString())))).Replace("#N", "").Replace("<>", "").Replace("<, ", "<"));
	}

	private void Form1_Load(object sender, EventArgs e)
	{
	}

	[GeneratedRegex("#I(?!n)")]
	private static partial Regex MyRegex();
	[GeneratedRegex("#Repeat\\((?:/\"(?<a>(?:(?!/\").)+?)\"/)(?:, (?<b>[0-9]*)(?:, \"(?<c>[^\\\\]+?)\")?)?\\)", RegexOptions.Singleline)]
	private static partial Regex MyRegex1();
	[GeneratedRegex("#Repeat\\((?:\"(?<a>(?:(?!/\").)+?)\")(?:, (?<b>[0-9]*)(?:, \"(?<c>[^\\\\]+?)\")?)?\\)", RegexOptions.Singleline)]
	private static partial Regex MyRegex2();
	[GeneratedRegex("#Repeat\\((?:(?<a>[^,\"]+))(?:, (?<b>[0-9]*)(?:, \"(?<c>[^\\\\]+?)\")?)?\\)", RegexOptions.Singleline)]
	private static partial Regex MyRegex3();
	[GeneratedRegex("#Code\\(([0-9A-Za-z_]+?)(?<star>\\*?)(?:, ([A-Za-z_][0-9A-Za-z_]*))?(?:, ([0-9]+))?(?:, p=(?:(?<a>[^\\r\\n,\"]+)|\"(?<a>[^\\r\\n]+?)\"))?(?:, f=(?<f>[0-9]+))?\\)")]
	private static partial Regex MyRegex4();
	[GeneratedRegex("(#Pattern3)\\(([^\\r\\n,\"]+), ([^\\r\\n,\"]+), ([^\\r\\n,\"]+)\\)")]
	private static partial Regex MyRegex5();
	[GeneratedRegex("#Pattern2\\((?:(?<a>[^\\r\\n,\"]+)|\"(?<a>(?:(?!/\").)+?)\"), (?<b>[^\\r\\n,\"]+), (?<c>[^\\r\\n,\"]+), (?<d>[^\\r\\n,\"]+)\\)")]
	private static partial Regex MyRegex6();
	[GeneratedRegex("(#Pattern3i)\\(([^\\r\\n,\"]+), ([^\\r\\n,\"]+), ([^\\r\\n,\"]+)\\)")]
	private static partial Regex MyRegex7();
	[GeneratedRegex("#Pattern2i\\((?:(?<a>[^\\r\\n,\"]+)|\"(?<a>(?:(?!/\").)+?)\"), (?<b>[^\\r\\n,\"]+), (?<c>[^\\r\\n,\"]+), (?<d>[^\\r\\n,\"]+)\\)")]
	private static partial Regex MyRegex8();
}