namespace Dictionaries.NStar;

public static class RedStarLinqDictionaries
{
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, TKey> function, Func<T, TValue> function2, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, TKey> function, Func<T, int, TValue> function2, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, TKey> function, Func<T, TValue> function2, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, TKey> function, Func<T, int, TValue> function2, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, TKey> function, Func<T, TValue> function2, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, TKey> function, Func<T, int, TValue> function2, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, TKey> function, Func<T, TValue> function2, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, TKey> function, Func<T, int, TValue> function2, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), RedStarLinq.ToList(source, function2), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, (TKey, TValue)> function, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, (TKey, TValue)> function, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, (TKey, TValue)> function, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, (TKey, TValue)> function, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, (TKey, TValue)> function, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, (TKey, TValue)> function, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, (TKey, TValue)> function, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, (TKey, TValue)> function, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, G.KeyValuePair<TKey, TValue>> function, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, G.KeyValuePair<TKey, TValue>> function, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, G.KeyValuePair<TKey, TValue>> function, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, G.KeyValuePair<TKey, TValue>> function, G.IEqualityComparer<TKey> comparer, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), comparer, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, G.KeyValuePair<TKey, TValue>> function, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, G.KeyValuePair<TKey, TValue>> function, Func<TKey, TKey, bool> equalFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, G.KeyValuePair<TKey, TValue>> function, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<TKey, TValue> ToDictionary<T, TKey, TValue>(this G.IEnumerable<T> source, Func<T, int, G.KeyValuePair<TKey, TValue>> function, Func<TKey, TKey, bool> equalFunction, Func<TKey, int> hashCodeFunction, bool unordered = false) where TKey : notnull => new(RedStarLinq.ToList(source, function), equalFunction, hashCodeFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<T> source, G.IEnumerable<T2> source2, bool unordered = false) where T : notnull => new(source, source2, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<T> source, G.IEnumerable<T2> source2, G.IEqualityComparer<T> comparer, bool unordered = false) where T : notnull => new(source, source2, comparer, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<T> source, G.IEnumerable<T2> source2, Func<T, T, bool> equalFunction, bool unordered = false) where T : notnull => new(source, source2, equalFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<T> source, G.IEnumerable<T2> source2, Func<T, T, bool> equalFunction, Func<T, int> hashCodeFunction, bool unordered = false) where T : notnull => new(source, source2, equalFunction, hashCodeFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this (G.IEnumerable<T>, G.IEnumerable<T2>) source, bool unordered = false) where T : notnull => new(source.Item1, source.Item2, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this (G.IEnumerable<T>, G.IEnumerable<T2>) source, G.IEqualityComparer<T> comparer, bool unordered = false) where T : notnull => new(source.Item1, source.Item2, comparer, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this (G.IEnumerable<T>, G.IEnumerable<T2>) source, Func<T, T, bool> equalFunction, bool unordered = false) where T : notnull => new(source.Item1, source.Item2, equalFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this (G.IEnumerable<T>, G.IEnumerable<T2>) source, Func<T, T, bool> equalFunction, Func<T, int> hashCodeFunction, bool unordered = false) where T : notnull => new(source.Item1, source.Item2, equalFunction, hashCodeFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<(T, T2)> source, bool unordered = false) where T : notnull => new(source, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<(T, T2)> source, G.IEqualityComparer<T> comparer, bool unordered = false) where T : notnull => new(source, comparer, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<(T, T2)> source, Func<T, T, bool> equalFunction, bool unordered = false) where T : notnull => new(source, equalFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<(T, T2)> source, Func<T, T, bool> equalFunction, Func<T, int> hashCodeFunction, bool unordered = false) where T : notnull => new(source, equalFunction, hashCodeFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<G.KeyValuePair<T, T2>> source, bool unordered = false) where T : notnull => new(source, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<G.KeyValuePair<T, T2>> source, G.IEqualityComparer<T> comparer, bool unordered = false) where T : notnull => new(source, comparer, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<G.KeyValuePair<T, T2>> source, Func<T, T, bool> equalFunction, bool unordered = false) where T : notnull => new(source, equalFunction, unordered);
	public static Dictionary<T, T2> ToDictionary<T, T2>(this G.IEnumerable<G.KeyValuePair<T, T2>> source, Func<T, T, bool> equalFunction, Func<T, int> hashCodeFunction, bool unordered = false) where T : notnull => new(source, equalFunction, hashCodeFunction, unordered);
}
