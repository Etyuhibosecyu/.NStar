namespace Corlib.NStar.Tests;

[TestClass]
public class RedStarLinqTests
{
	[TestMethod]
	public void TestAll()
	{
		G.IEnumerable<string> a = new List<string>(list);
		var c = a.All(x => x.Length > 0);
		var d = E.All(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("#"));
		d = E.All(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("M"));
		d = E.All(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, bool>)null!));
		a = list.ToArray();
		c = a.All(x => x.Length > 0);
		d = E.All(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("#"));
		d = E.All(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("M"));
		d = E.All(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, bool>)null!));
		a = enumerable;
		c = a.All(x => x.Length > 0);
		d = E.All(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("#"));
		d = E.All(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("M"));
		d = E.All(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, bool>)null!));
		a = enumerable2;
		c = a.All(x => x.Length > 0);
		d = E.All(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("#"));
		d = E.All(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("M"));
		d = E.All(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, bool>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.All(x => x.Length > 0);
		d = E.All(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("#"));
		d = E.All(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.All(x => x.StartsWith("M"));
		d = E.All(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, bool>)null!));
		a = new List<string>(list);
		c = a.All((x, index) => x.Length > 0 && index >= 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => index < 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => x.StartsWith("M") && index > 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, int, bool>)null!));
		a = list.ToArray();
		c = a.All((x, index) => x.Length > 0 && index >= 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => index < 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => x.StartsWith("M") && index > 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, int, bool>)null!));
		a = enumerable;
		c = a.All((x, index) => x.Length > 0 && index >= 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => index < 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => x.StartsWith("M") && index > 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, int, bool>)null!));
		a = enumerable2;
		c = a.All((x, index) => x.Length > 0 && index >= 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => index < 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => x.StartsWith("M") && index > 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, int, bool>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.All((x, index) => x.Length > 0 && index >= 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => index < 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.All((x, index) => x.StartsWith("M") && index > 0);
		d = E.All(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.All((Func<string, int, bool>)null!));
	}

	[TestMethod]
	public void TestAny()
	{
		G.IEnumerable<string> a = new List<string>(list);
		var c = a.Any(x => x.Length > 0);
		var d = E.Any(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("#"));
		d = E.Any(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("M"));
		d = E.Any(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, bool>)null!));
		a = list.ToArray();
		c = a.Any(x => x.Length > 0);
		d = E.Any(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("#"));
		d = E.Any(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("M"));
		d = E.Any(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, bool>)null!));
		a = enumerable;
		c = a.Any(x => x.Length > 0);
		d = E.Any(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("#"));
		d = E.Any(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("M"));
		d = E.Any(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, bool>)null!));
		a = enumerable2;
		c = a.Any(x => x.Length > 0);
		d = E.Any(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("#"));
		d = E.Any(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("M"));
		d = E.Any(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, bool>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.Any(x => x.Length > 0);
		d = E.Any(a, x => x.Length > 0);
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("#"));
		d = E.Any(a, x => x.StartsWith("#"));
		Assert.AreEqual(c, d);
		c = a.Any(x => x.StartsWith("M"));
		d = E.Any(a, x => x.StartsWith("M"));
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, bool>)null!));
		a = new List<string>(list);
		c = a.Any((x, index) => x.Length > 0 && index >= 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => index < 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => x.StartsWith("M") && index > 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, int, bool>)null!));
		a = list.ToArray();
		c = a.Any((x, index) => x.Length > 0 && index >= 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => index < 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => x.StartsWith("M") && index > 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, int, bool>)null!));
		a = enumerable;
		c = a.Any((x, index) => x.Length > 0 && index >= 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => index < 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => x.StartsWith("M") && index > 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, int, bool>)null!));
		a = enumerable2;
		c = a.Any((x, index) => x.Length > 0 && index >= 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => index < 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => x.StartsWith("M") && index > 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, int, bool>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.Any((x, index) => x.Length > 0 && index >= 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.Length > 0 && x.index >= 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => index < 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.index < 0);
		Assert.AreEqual(c, d);
		c = a.Any((x, index) => x.StartsWith("M") && index > 0);
		d = E.Any(E.Select(a, (elem, index) => (elem, index)), x => x.elem.StartsWith("M") && x.index > 0);
		Assert.AreEqual(c, d);
		Assert.ThrowsException<ArgumentNullException>(() => a.Any((Func<string, int, bool>)null!));
		a = new List<string>(list);
		c = a.Any();
		d = E.Any(a);
		Assert.AreEqual(c, d);
		a = list.ToArray();
		c = a.Any();
		d = E.Any(a);
		Assert.AreEqual(c, d);
		a = enumerable;
		c = a.Any();
		d = E.Any(a);
		Assert.AreEqual(c, d);
		a = enumerable2;
		c = a.Any();
		d = E.Any(a);
		Assert.AreEqual(c, d);
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.Any();
		d = E.Any(a);
		Assert.AreEqual(c, d);
	}

	[TestMethod]
	public void TestBreak()
	{
		G.IEnumerable<string> a = new List<string>(list);
		var c = a.Break(x => x[0], x => x[1..]);
		var d = (E.Select(a, x => x[0]), E.Select(a, x => x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break(x => (x[0], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = E.Select(a, x => (x[0], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, string)>)null!));
		a = list.ToArray();
		c = a.Break(x => x[0], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break(x => (x[0], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = E.Select(a, x => (x[0], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, string)>)null!));
		a = enumerable;
		c = a.Break(x => x[0], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break(x => (x[0], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = E.Select(a, x => (x[0], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, string)>)null!));
		a = enumerable2;
		c = a.Break(x => x[0], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break(x => (x[0], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = E.Select(a, x => (x[0], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, string)>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.Break(x => x[0], x => x[1..]);
		d = (E.Select(a, x => x[0]), E.Select(a, x => x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break(x => (x[0], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = E.Select(a, x => (x[0], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, string)>)null!));
		a = new List<string>(list);
		c = a.Break((x, index) => (char)(x[0] + index), (x, index) => x[1..] + index.ToString("D2"));
		d = (E.Select(a, (x, index) => (char)(x[0] + index)), E.Select(a, (x, index) => x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break((x, index) => ((char)(x[0] + index), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, string)>)null!));
		a = list.ToArray();
		c = a.Break((x, index) => (char)(x[0] + index), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break((x, index) => ((char)(x[0] + index), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, string)>)null!));
		a = enumerable;
		c = a.Break((x, index) => (char)(x[0] + index), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break((x, index) => ((char)(x[0] + index), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, string)>)null!));
		a = enumerable2;
		c = a.Break((x, index) => (char)(x[0] + index), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break((x, index) => ((char)(x[0] + index), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, string)>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c = a.Break((x, index) => (char)(x[0] + index), (x, index) => x[1..] + index.ToString("D2"));
		d = (E.Select(a, (x, index) => (char)(x[0] + index)), E.Select(a, (x, index) => x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		c = a.Break((x, index) => ((char)(x[0] + index), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c.Item1, d.Item1) && E.SequenceEqual(c.Item2, d.Item2));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, string)>)null!));
		a = new List<string>(list);
		var c2 = a.Break(x => x[0], x => x[^1], x => x[1..]);
		var d2 = (E.Select(a, x => x[0]), E.Select(a, x => x[^1]), E.Select(a, x => x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break(x => (x[0], x[^1], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = E.Select(a, x => (x[0], x[^1], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], x => x[^1], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, char, string)>)null!));
		a = list.ToArray();
		c2 = a.Break(x => x[0], x => x[^1], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break(x => (x[0], x[^1], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = E.Select(a, x => (x[0], x[^1], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], x => x[^1], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, char, string)>)null!));
		a = enumerable;
		c2 = a.Break(x => x[0], x => x[^1], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break(x => (x[0], x[^1], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = E.Select(a, x => (x[0], x[^1], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], x => x[^1], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, char, string)>)null!));
		a = enumerable2;
		c2 = a.Break(x => x[0], x => x[^1], x => x[1..]);
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break(x => (x[0], x[^1], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = E.Select(a, x => (x[0], x[^1], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], x => x[^1], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, char, string)>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c2 = a.Break(x => x[0], x => x[^1], x => x[1..]);
		d2 = (E.Select(a, x => x[0]), E.Select(a, x => x[^1]), E.Select(a, x => x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break(x => (x[0], x[^1], x[1..]));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = E.Select(a, x => (x[0], x[^1], x[1..])).Break();
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, char>)null!, (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], (Func<string, char>)null!, (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break(x => x[0], x => x[^1], (Func<string, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, (char, char, string)>)null!));
		a = new List<string>(list);
		c2 = a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (x, index) => x[1..] + index.ToString("D2"));
		d2 = (E.Select(a, (x, index) => (char)(x[0] + index)), E.Select(a, (x, index) => (char)(x[^1] * index + 5)), E.Select(a, (x, index) => x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break((x, index) => ((char)(x[0] + index), (char)(x[^1] * index + 5), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, char, string)>)null!));
		a = list.ToArray();
		c2 = a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break((x, index) => ((char)(x[0] + index), (char)(x[^1] * index + 5), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, char, string)>)null!));
		a = enumerable;
		c2 = a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break((x, index) => ((char)(x[0] + index), (char)(x[^1] * index + 5), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, char, string)>)null!));
		a = enumerable2;
		c2 = a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (x, index) => x[1..] + index.ToString("D2"));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break((x, index) => ((char)(x[0] + index), (char)(x[^1] * index + 5), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, char, string)>)null!));
		a = E.SkipWhile(list, _ => random.Next(10) != -1);
		c2 = a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (x, index) => x[1..] + index.ToString("D2"));
		d2 = (E.Select(a, (x, index) => (char)(x[0] + index)), E.Select(a, (x, index) => (char)(x[^1] * index + 5)), E.Select(a, (x, index) => x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		c2 = a.Break((x, index) => ((char)(x[0] + index), (char)(x[^1] * index + 5), x[1..] + index.ToString("D2")));
		Assert.IsTrue(E.SequenceEqual(c2.Item1, d2.Item1) && E.SequenceEqual(c2.Item2, d2.Item2) && E.SequenceEqual(c2.Item3, d2.Item3));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, char>)null!, (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (Func<string, int, char>)null!, (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((x, index) => (char)(x[0] + index), (x, index) => (char)(x[^1] * index + 5), (Func<string, int, string>)null!));
		Assert.ThrowsException<ArgumentNullException>(() => a.Break((Func<string, int, (char, char, string)>)null!));
	}

	[TestMethod]
	public void TestEquals()
	{
		for (var i = 0; i < 1000; i++)
		{
			G.IEnumerable<string> a = new List<string>(E.Select(E.Range(0, random.Next(2, 100)), _ => random.Next(1000).ToString("D3")));
			G.IEnumerable<string> b = new List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = Array.Empty<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(a, x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Skip(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.SkipLast(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Take(a, 0), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(a, _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Skip(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.SkipLast(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(E.SkipLast(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(E.Skip(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.TakeWhile(a, _ => random.Next(10) == -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			a = E.ToArray(E.Select(E.Range(0, random.Next(2, 100)), _ => random.Next(1000).ToString("D3")));
			b = new List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = Array.Empty<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(a, x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Skip(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.SkipLast(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Take(a, 0), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(a, _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Skip(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.SkipLast(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(E.SkipLast(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(E.Skip(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.TakeWhile(a, _ => random.Next(10) == -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			a = new G.List<string>(E.Select(E.Range(0, random.Next(2, 100)), _ => random.Next(1000).ToString("D3")));
			b = new List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = Array.Empty<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(a, x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Skip(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.SkipLast(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Take(a, 0), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(a, _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Skip(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.SkipLast(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(E.SkipLast(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(E.Skip(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.TakeWhile(a, _ => random.Next(10) == -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			a = E.Select(E.ToArray(E.Select(E.Range(0, random.Next(2, 100)), _ => random.Next(1000).ToString("D3"))), x => x);
			b = new List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = Array.Empty<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(a, x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Skip(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.SkipLast(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Take(a, 0), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(a, _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Skip(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.SkipLast(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(E.SkipLast(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(E.Skip(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.TakeWhile(a, _ => random.Next(10) == -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			a = E.SkipWhile(E.ToArray(E.Select(E.Range(0, random.Next(2, 100)), _ => random.Next(1000).ToString("D3"))), _ => random.Next(10) != -1);
			b = new List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.ToArray(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = Array.Empty<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(a);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Skip(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(b, random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.SkipLast(b, 1));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")));
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = new G.List<string>();
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(a, x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Skip(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(b, random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.SkipLast(b, 1), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Append(E.SkipLast(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Prepend(E.Skip(b, 1), random.Next(1000).ToString("D3")), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.Select(E.Take(a, 0), x => x);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(a, _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Skip(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(a, random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.SkipLast(a, 1), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Append(E.SkipLast(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.SkipWhile(E.Prepend(E.Skip(a, 1), random.Next(1000).ToString("D3")), _ => random.Next(10) != -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
			b = E.TakeWhile(a, _ => random.Next(10) == -1);
			Assert.AreEqual(RedStarLinq.Equals(a, b), E.SequenceEqual(a, b));
		}
	}

	[TestMethod]
	public void TestSetAll()
	{
		var a = E.ToArray(list).SetAll(defaultString);
		var b = new G.List<string>(list);
		for (var i = 0; i < b.Count; i++)
			b[i] = defaultString;
		Assert.IsTrue(RedStarLinq.Equals(a, b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = E.ToArray(list).SetAll(defaultString, 3);
		b = new G.List<string>(list);
		for (var i = 3; i < b.Count; i++)
			b[i] = defaultString;
		Assert.IsTrue(RedStarLinq.Equals(a, b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = E.ToArray(list).SetAll(defaultString, 2, 4);
		b = new G.List<string>(list);
		for (var i = 2; i < 6; i++)
			b[i] = defaultString;
		Assert.IsTrue(RedStarLinq.Equals(a, b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = E.ToArray(list).SetAll(defaultString, ^5);
		b = new G.List<string>(list);
		for (var i = b.Count - 5; i < b.Count; i++)
			b[i] = defaultString;
		Assert.IsTrue(RedStarLinq.Equals(a, b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = E.ToArray(list).SetAll(defaultString, ^6..4);
		b = new G.List<string>(list);
		for (var i = b.Count - 6; i < 4; i++)
			b[i] = defaultString;
		Assert.IsTrue(RedStarLinq.Equals(a, b));
		Assert.IsTrue(E.SequenceEqual(b, a));
	}

	[TestMethod]
	public void TestSkip()
	{
		var a = list.Skip(3);
		var b = E.Skip(list, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Skip(1000);
		b = E.Skip(list, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Skip(-2);
		b = E.Skip(list, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Skip(3);
		b = E.Skip(enumerable, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Skip(1000);
		b = E.Skip(enumerable, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Skip(-2);
		b = E.Skip(enumerable, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Skip(3);
		b = E.Skip(enumerable2, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Skip(1000);
		b = E.Skip(enumerable2, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Skip(-2);
		b = E.Skip(enumerable2, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
	}

	[TestMethod]
	public void TestSkipLast()
	{
		var a = list.SkipLast(4);
		var b = E.SkipLast(list, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.SkipLast(1000);
		b = E.SkipLast(list, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.SkipLast(-5);
		b = E.SkipLast(list, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.SkipLast(4);
		b = E.SkipLast(enumerable, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.SkipLast(1000);
		b = E.SkipLast(enumerable, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.SkipLast(-5);
		b = E.SkipLast(enumerable, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.SkipLast(4);
		b = E.SkipLast(enumerable2, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.SkipLast(1000);
		b = E.SkipLast(enumerable2, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.SkipLast(-5);
		b = E.SkipLast(enumerable2, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
	}

	[TestMethod]
	public void TestTake()
	{
		var a = list.Take(3);
		var b = E.Take(list, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(1000);
		b = E.Take(list, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(-2);
		b = E.Take(list, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(2..5);
		b = E.Take(list, 2..5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(5..2);
		b = E.Take(list, 5..2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(2..^3);
		b = E.Take(list, 2..^3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(5..^4);
		b = E.Take(list, 5..^4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(^5..6);
		b = E.Take(list, ^5..6);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(^10..9);
		b = E.Take(list, ^10..9);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.Take(^5..^2);
		b = E.Take(list, ^5..^2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(3);
		b = E.Take(enumerable, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(1000);
		b = E.Take(enumerable, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(-2);
		b = E.Take(enumerable, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(2..5);
		b = E.Take(enumerable, 2..5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(5..2);
		b = E.Take(enumerable, 5..2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(2..^3);
		b = E.Take(enumerable, 2..^3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(5..^4);
		b = E.Take(enumerable, 5..^4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(^5..6);
		b = E.Take(enumerable, ^5..6);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(^10..9);
		b = E.Take(enumerable, ^10..9);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.Take(^5..^2);
		b = E.Take(enumerable, ^5..^2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(3);
		b = E.Take(enumerable2, 3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(1000);
		b = E.Take(enumerable2, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(-2);
		b = E.Take(enumerable2, -2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(2..5);
		b = E.Take(enumerable2, 2..5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(5..2);
		b = E.Take(enumerable2, 5..2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(2..^3);
		b = E.Take(enumerable2, 2..^3);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(5..^4);
		b = E.Take(enumerable2, 5..^4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(^5..6);
		b = E.Take(enumerable2, ^5..6);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(^10..9);
		b = E.Take(enumerable2, ^10..9);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.Take(^5..^2);
		b = E.Take(enumerable2, ^5..^2);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
	}

	[TestMethod]
	public void TestTakeLast()
	{
		var a = list.TakeLast(4);
		var b = E.TakeLast(list, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.TakeLast(1000);
		b = E.TakeLast(list, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = list.TakeLast(-5);
		b = E.TakeLast(list, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.TakeLast(4);
		b = E.TakeLast(enumerable, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.TakeLast(1000);
		b = E.TakeLast(enumerable, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable.TakeLast(-5);
		b = E.TakeLast(enumerable, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.TakeLast(4);
		b = E.TakeLast(enumerable2, 4);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.TakeLast(1000);
		b = E.TakeLast(enumerable2, 1000);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
		a = enumerable2.TakeLast(-5);
		b = E.TakeLast(enumerable2, -5);
		Assert.IsTrue(a.Equals(b));
		Assert.IsTrue(E.SequenceEqual(b, a));
	}
}
